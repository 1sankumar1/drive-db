(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=global||self,global.drive=factory())})(this,function(){"use strict";const self=typeof window!=="undefined"?window:typeof global!=="undefined"?global:{};if(!self.fetch){try{self.fetch=require("node-fetch")}catch(error){throw new Error("fetch() is not available, please install node-fetch or polyfill fetch()")}}const getKeys=row=>Object.keys(row).filter(key=>/^gsx\$/.test(key));const parseRow=row=>{return getKeys(row).reduce((obj,key)=>{obj[key.slice(4)]=row[key].$t;return obj},{})};const retrieve=async({sheet:sheet,tab:tab})=>{const res=await fetch(`https://spreadsheets.google.com/feeds/list/${sheet}/${tab}/public/values?alt=json`);if(!res.ok){throw new Error(`Error ${res.status} retrieving the spreadsheet ${sheet}`)}const full=await res.json();return full.feed.entry.map(parseRow)};const memo=(cb,map={})=>async(options,timeout)=>{const key=JSON.stringify(options);const time=new Date;if(map[key]&&time-map[key].time<timeout){return map[key].value}map[key]={value:cb(options),time:time};return map[key].value};const getSheet=memo(retrieve);var index=async options=>{const{sheet:sheet="",tab:tab="default",cache:cache=3600,onload:onload=(d=>d)}=typeof options==="object"?options:{sheet:options};if(!sheet)throw new Error("Need a Google Drive sheet id to load");return onload(getSheet({sheet:sheet,tab:tab},cache))};return index});